
#define MAXN 25000//点数
#define MAXM 200000//道路数
#define dis(i,j)  (sqrt(pow((nod[i].x-nod[j].x),2)+pow((nod[i].y-nod[j].y),2)))


#define search(i,y) for(int i=head[y];i;i=edge[i].next) //遍历一个点的出边
#define add(u,v,c)  {edge[++cnt]={u,v,c,head[u]};head[u]=cnt;}//加入一条边
int head[MAXN],cnt=1;//0说明没有下一个值
struct EDGE{
    int u,v,c;
    int next;//下一个值的位置;
}edge[MAXM];

******************************************************************
******************************************************************
//在二分匹配的时候进行删边操作优化时间复杂度
//在250 * 50的图上能优化100ms左右
inline  int del(int x){
    if(x==0)return 0;
    int k=del(edge[x].next);
    edge[x].next=k;
    if("表达式说明要删")
        return k;
    else
        return x;
}
        for(int i=1;i<t;i++){
            del(head[i]);
        }