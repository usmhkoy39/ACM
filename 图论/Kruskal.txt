//Kruskal算法 从边的角度算最小生成树
//用于最小生成树的计算
//复杂度为O（m） 需要并查集作为辅助
typedef  pair<int,pair<int ,int > > pi_ii;
int n;
vector<pair<int,pair<int,int> > > edge;
int  kruskal(int m){//m为边数
    int ans=0;
    grp.init(n);
    priority_queue<pi_ii ,vector<pi_ii>,greater<pi_ii > > que;
    for(auto i:edge)
        que.push(i);
    while(!que.empty()){
        pi_ii tmp;
        tmp=que.top();que.pop();
        int u=tmp.second.first,v=tmp.second.second;
        if(!grp.judge(u,v)){
            grp.merge(u,v);
            ans+=tmp.first;
        }
    }
}

//***************************************************************************
//***************************************************************************
//并查集代码
struct DisjointSet {
    int n;
    int root[MAXN];
    void init(int x){
        n=x;
        for(int i=1;i<=n;i++)root[i]=i;
    }
    int find(int x){
        if(x!=root[x])
            root[x]=find(root[x]);
        return root[x];
    }
    void merge(int x,int y){root[find(x)]=find(y);}//把x并入y
    bool judge(int x,int y){return find(x)==find(y);}
}grp;
